/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PlayerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// editor-enhancements.ts
var EditorExtensions = class {
  static getSelectedText(editor) {
    if (!editor.somethingSelected()) {
      let wordBoundaries = this.getWordBoundaries(editor);
      editor.setSelection(wordBoundaries.start, wordBoundaries.end);
    }
    return editor.getSelection();
  }
  static cursorWithinBoundaries(cursor, match) {
    if (match.index === void 0)
      return false;
    let startIndex = match.index;
    let endIndex = match.index + match[0].length;
    return startIndex <= cursor.ch && cursor.ch <= endIndex;
  }
  static getWordBoundaries(editor) {
    let startCh, endCh;
    let cursor = editor.getCursor();
    let lineText = editor.getLine(cursor.line);
    let linkLineRegex = /\[([^\[\]]*)\]\((https?:\/\/(?:www\.|(?!www))bilibili\.[^\s]{2,}|www\.bilibili\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))bilibili\.[^\s]{2,}|www\.bilibili\.[^\s]{2,})\)/gi;
    let linksInLine = lineText.matchAll(linkLineRegex);
    for (let match of linksInLine) {
      if (this.cursorWithinBoundaries(cursor, match)) {
        if (match.index == void 0)
          return {
            start: cursor,
            end: cursor
          };
        return {
          start: { line: cursor.line, ch: match.index },
          end: { line: cursor.line, ch: match.index + match[0].length }
        };
      }
    }
    let lineRegex = /(https?:\/\/(?:www\.|(?!www))bilibili\.[^\s]{2,}|www\.bilibili\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))bilibili\.[^\s]{2,}|www\.bilibili\.[^\s]{2,})/gi;
    let urlsInLine = lineText.matchAll(lineRegex);
    for (let match of urlsInLine) {
      if (this.cursorWithinBoundaries(cursor, match)) {
        if (match.index == void 0)
          return {
            start: cursor,
            end: cursor
          };
        return {
          start: { line: cursor.line, ch: match.index },
          end: { line: cursor.line, ch: match.index + match[0].length }
        };
      }
    }
    return {
      start: cursor,
      end: cursor
    };
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  enhanceDefaultPaste: true,
  enableAutoPlay: false,
  enableDanmaku: true
};
var PlayerPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "convert-bilibili-url",
      name: "Convert Bilibili URL to Embedded Player",
      editorCallback: (editor) => this.convertUrlToPlayer(editor),
      hotkeys: [
        {
          modifiers: ["Mod", "Shift"],
          key: "b"
        }
      ]
    });
    this.pasteFunction = this.pasteUrlToPlayer.bind(this);
    this.registerEvent(
      this.app.workspace.on("editor-paste", this.pasteFunction)
    );
    this.addSettingTab(new PlayerSettingTab(this.app, this));
  }
  convertUrlToPlayer(editor) {
    let selectedText = (EditorExtensions.getSelectedText(editor) || "").trim();
    let bvidRegex = /(?<=\/video\/)[a-zA-z0-9]+/gi;
    let match = selectedText.match(bvidRegex);
    if (match === null)
      return;
    let bvid = match[0];
    let p = "1";
    let pRegex = /(?<=\?p\=)[0-9]+/gi;
    match = selectedText.match(pRegex);
    if (match !== null)
      p = match[0];
    let danmaku = this.settings.enableDanmaku ? "1" : "0";
    let autoplay = this.settings.enableAutoPlay ? "1" : "0";
    let playerText = `<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="https://player.bilibili.com/player.html?bvid=${bvid}&p=${p}&autoplay=${autoplay}&danmaku=${danmaku}" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div>
`;
    editor.replaceSelection(playerText);
  }
  async pasteUrlToPlayer(clipboard, editor) {
    if (!this.settings.enhanceDefaultPaste) {
      return;
    }
    if (clipboard.clipboardData === null)
      return;
    let clipboardText = clipboard.clipboardData.getData("text/plain");
    if (clipboardText === null || clipboardText === "")
      return;
    let lineRegex = /(https?:\/\/(?:www\.|(?!www))bilibili\.[^\s]{2,}|www\.bilibili\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))bilibili\.[^\s]{2,}|www\.bilibili\.[^\s]{2,})/gi;
    let urlsInLine = clipboardText.match(lineRegex);
    if (urlsInLine === null)
      return;
    let bvidRegex = /(?<=\/video\/)[a-zA-z0-9]+/gi;
    let match = clipboardText.match(bvidRegex);
    if (match === null)
      return;
    let bvid = match[0];
    clipboard.stopPropagation();
    clipboard.preventDefault();
    let p = "1";
    let pRegex = /(?<=\?p\=)[0-9]+/gi;
    match = clipboardText.match(pRegex);
    if (match !== null)
      p = match[0];
    let danmaku = this.settings.enableDanmaku ? "1" : "0";
    let autoplay = this.settings.enableAutoPlay ? "1" : "0";
    let playerText = `<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="https://player.bilibili.com/player.html?bvid=${bvid}&p=${p}&autoplay=${autoplay}&danmaku=${danmaku}" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div>
`;
    editor.replaceSelection(playerText);
    return;
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var PlayerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("\u5F00\u542F\u7C98\u8D34\u5F3A\u5316").setDesc("\u652F\u6301\u5C06\u590D\u5236\u7684\u89C6\u9891\u94FE\u63A5\u8F6C\u6362\u4E3A\u5D4C\u5165\u5F0F\u64AD\u653E\u5668").addToggle((val) => val.setValue(this.plugin.settings.enhanceDefaultPaste).onChange(async (value) => {
      console.log(value);
      this.plugin.settings.enhanceDefaultPaste = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u5F00\u542F\u5F39\u5E55").setDesc("\u5F00\u542F\u5D4C\u5165\u5F0F\u64AD\u653E\u5668\u7684\u5F39\u5E55\u529F\u80FD").addToggle((val) => val.setValue(this.plugin.settings.enableDanmaku).onChange(async (value) => {
      console.log(value);
      this.plugin.settings.enableDanmaku = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u5F00\u542F\u81EA\u52A8\u64AD\u653E").setDesc("\u5F00\u542F\u5D4C\u5165\u5F0F\u64AD\u653E\u5668\u7684\u81EA\u52A8\u64AD\u653E\u529F\u80FD").addToggle((val) => val.setValue(this.plugin.settings.enableAutoPlay).onChange(async (value) => {
      console.log(value);
      this.plugin.settings.enableAutoPlay = value;
      await this.plugin.saveSettings();
    }));
  }
};
